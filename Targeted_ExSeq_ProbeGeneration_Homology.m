% This script is the first of two to run to generate barcoded padlock
% probes for a multiplexed Targeted ExSeq experiment. This script assumes
% that the genelist has been constructed, and outputs the potential
% homology regions for the padlock probes.
% 
% For further details, see the probe generation protocol.

close all; clear;

%% START OF USER INPUT %%

% Required parameters to set:
% 1) genelist_spreadsheet
% 2) genbank_sequences
% 3) RefSeq_database
% 4) homology_regions_output

% Constants set (optional parameters to modify, all within the params struct):
% A) Parameters governing the structure of the padlock probe
%   1) HOMOLOGY_LENGTH = 32
%   2) GC_RANGE = [40, 65]
%   3) MAX_TM_SEPARATION = 8
% B) Parameters governing the search process
%   4) E_VALUE = 0.05 
%   5) SPACER_LENGTH = 0
%   6) BLAST_HOMOLOGY_MIN_LENGTH_CUTOFF = 13
%   7) BLAST_HOMOLOGY_LIGATION_JUNCTION_MIN_OVERLAP_CUTOFF = 4
%   8) REPORT_IF_BELOW_NUMBER_OF_PROBES = 9
    
%%%% REQUIRED PARAMETERS TO SET %%%%

% Filename for genelist Excel file. This Excel file has four columns:
% gene symbol, RefSeq accession number, minimum Tm threshold, and barcode.
% Each row corresponds to a gene with an assigned barcode. See protocol for
% futher details
genelist_spreadsheet = '';

% Filename for GenBank format file from RefSeq, containing sequences of
% each mRNA in the genelist. See protocol for further details.
genbank_sequences = '';

% Filename for the reference RefSeq database for BLAST. Resulting files
% (.fna, .nhr, .nin, .nsq files) should be saved in same folder as this
% script. All files should have same filename before file extension. See
% protocol for further details.
refseq_database = '';

% Output directory (directory generated by script) where the possible
% homology regions for each gene in the genelist are saved.
homology_regions_output = '';  

%%%% CONSTANTS (OPTIONAL PARAMETERS TO MODIFY) %%%%

% Parameters governing structure of the padlock probe

% Default length of the homology region is 32, corresponding to 16 bases on
% each arm of the padlock probe.
params.HOMOLOGY_LENGTH = 32;

% GC range: minimum and maximum of GC content for the homology region.
params.GC_RANGE = [40, 65];

% Maximum melting temperature separation between the two arms of the
% homology region
params.MAX_TM_SEPARATION = 8;

% Parameters governing search process for homology regions:

% The maximum acceptable E value for BLAST queries to be considered for
% further evaluation. For a particular hit, a higher E value indicates a
% less-specific match; lower E values correspond to more specific matches.
% This parameter sets the threshold E value for which hits are retained for
% further evaluation. See protocol for further note on E values.
params.E_VALUE = 0.05;

% The spacer length is the minimum separation between adjacent homology
% regions. If a successful homology region is found, the next search begins
% immediately after the end of the region, plus the spacer length.
params.SPACER_LENGTH = 0;

% In the homology search, the minimum number of matching bases of a BLAST
% hit to proceed with considering query sequence exclusion. BLAST hits
% with fewer matching bases are accepted.
params.BLAST_HOMOLOGY_MIN_LENGTH_CUTOFF = 13;

% In the homology search, the minimum overlap of the BLAST hit on both
% sides of the ligation junction to exclude the query. 
params.BLAST_HOMOLOGY_LIGATION_JUNCTION_MIN_OVERLAP_CUTOFF = 4;

% If a gene gets below this threshold of number of binding regions
% identified, information is printed.
params.REPORT_IF_BELOW_NUMBER_OF_PROBES = 9;

% Computed parameters
params.FIVEPRIME_END = floor(params.HOMOLOGY_LENGTH/2);
params.THREEPRIME_START = params.FIVEPRIME_END + 1;

%%%% END OF USER INPUT %%%%
%%
% Save current warning state
warnState = warning;
warning('off', 'Bioinfo:fastawrite:AppendToFile');
warning('off', 'MATLAB:DELETE:FileNotFound');

% Check that all mandatory parameters are specified
if isempty(genelist_spreadsheet) || isempty(genbank_sequences) || isempty(homology_regions_output) || isempty(refseq_database)
    error('Did not specify mandatory parameter.');
end

% Load genelist table
T_genelist = readtable(genelist_spreadsheet, 'ReadVariableNames', false, 'ReadRowNames', false);
T_genelist.Properties.VariableNames = {'Symbol', 'Accession', 'MinTm', 'Barcode'};

% Load GenBank sequences of all the genes
gb_sequences = genbankread(genbank_sequences);

% Generate output directory
mkdir(homology_regions_output);

% For every gene in the gene list, run a sliding window search to find
% acceptable homology regions. Search is in three parts: (1) searching for
% sequences that pass compexity criteria; (2) searching for sequences that
% pass physical properties criteria; and (3) searching for sequences that
% are unique, without homology to other RNA transcripts. For further
% details on the search, see the full protocol and/or further comments in
% the relevant functions.
%
% Note that the search query is the actual RNA transcript segment. The
% sequences are reverse complemented immediately before saving, so that the
% saved sequences are the same sequences as on the final padlock probes.

for genes = 1:size(T_genelist,1)
% Optional: tic/toc to display time for loop.
tic    
    
    % Get gene symbol
    genename = T_genelist.Symbol{genes};    
    
    disp(['Starting search for gene ' num2str(genes) ' of ' num2str(size(T_genelist,1)) ': ' genename]);
    
    % Get sequence parameters
    minTm = T_genelist.MinTm(genes); % transcript-specific minimum Tm threshold
    accession = T_genelist.Accession{genes}; 
    accession = char(regexp(accession, '^([\w\_]+)', 'match')); % get accession number for current gene and trim trailing .n
    
    % Get the gene sequence for the current gene, searching first by
    % LocusName, then by Accession.
    index = find(strcmp({gb_sequences.LocusName}, accession) == 1);
    if isempty(index)
        index = find(strcmp({gb_sequences.Accession}, accession) == 1); 
    end 
    S = gb_sequences(index).Sequence; % current gene sequence is S

    % We start the search at the 5' UTR and end at the end of the 3' UTR.
    % If needed, the metadata in the GenBank file contains the start/end of 
    % the coding sequence, which can be used as additional filters (via
    % gb_sequences(index).CDS.indices ).    
    idx = 1; 
    S = S(idx:end);

    % Index to the tail of the search query
    tail = params.HOMOLOGY_LENGTH + params.SPACER_LENGTH + 1;
    probenum = 1;
    BindingSites = {};
    % the sliding window starts here - first filter the sequence according the GC, Tm etc. and then (if the sequence pass) blast against excluded sequences
    % (i.e. mRNA sequences of all the other genes)
    while tail < length(S)
        
        % get the sequence in the current sliding window 
        TempSeq = S((tail - params.HOMOLOGY_LENGTH - params.SPACER_LENGTH):(tail-params.SPACER_LENGTH - 1));
        
        is_excluded = false;
        
        % Test TempSeq for complexity
        is_excluded = screen_homology_complexity(TempSeq);

        % Test TempSeq for physical properties
        if is_excluded == false            
            is_excluded = screen_homology_physical(TempSeq, minTm, params);             
        end
        
        % Test TempSeq for homology
        if is_excluded == false
            is_excluded = screen_homology_blast(TempSeq, refseq_database, genename, accession, params);       
        end

        % After performing search, either advance sliding window
        % (is an excluded homology region candidate, i.e. unsuccessful
        % search), or save the sequence (in the case of a successful
        % search).
              
        if is_excluded == true % sequence fails search criteria
            tail = tail + 1; 
        else
            % sequence passes search criteria, and is recorded as a
            % possible binding site. The sliding window is advanced past
            % the end of the currently identified region.
            probeindex{probenum} = tail - params.HOMOLOGY_LENGTH - params.SPACER_LENGTH;
            tail = tail + params.HOMOLOGY_LENGTH + params.SPACER_LENGTH;
            BindingSites{probenum} = TempSeq;
            probenum = probenum + 1;
        end
        delete('temp.fa');
    end
    
    % Output after sliding window search: for the current gene of interest,
    % print the **REVERSE COMPLEMENTS** of the binding sites to a FASTA
    % file named by the accession number. Each sequence in the FASTA file
    % contains the probe number, index to the location in the sequence, and
    % Tm in the sequence header.
    
    delete(['./' homology_regions_output '/' accession '.fa']); % delete prior file from previous run    
    for ii = 1:max(size(BindingSites))
        RevBindingSites{ii} = seqrcomplement(BindingSites{ii});        
        fasta.Sequence = RevBindingSites{ii};
        fasta.Header = ['probe_' num2str(ii) '_index_' num2str(probeindex{ii}), '_MinTm_', num2str(minTm)];        
        fastawrite(['./' homology_regions_output '/' accession '.fa'], fasta);       
    end
    
    % Print information about genes that don't have enough binding sites 
    number_of_probes_per_gene = max(size(BindingSites));
    sequence_length = length(S);
    if number_of_probes_per_gene < params.REPORT_IF_BELOW_NUMBER_OF_PROBES
        disp('GeneSymbol RefSeqName GeneLength NumberOfBindingSites') 
        disp([genename, char(9), accession, char(9), num2str(sequence_length), char(9), num2str(number_of_probes_per_gene)])        
    end
    clear probeindx;
    clear BindingSites;
   
toc
end
warning(warnState); % Reset warning state to previous settings